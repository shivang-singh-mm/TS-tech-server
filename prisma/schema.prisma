generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PURPOSE {
  ENTREPRENEUR
  STUDENT
  STARTUP
  LEGALITIES
  EMPLOYEE
  RECRUITER
  INVESTOR
  INFLUENCER
  MARKETING
}

enum COMMENTTYPES {
  POST
  COMMENT
}

enum LIKETYPES {
  POST
  COMMENT
}

enum NOTIFICATIONTYPE {
  LIKE
  COMMENT
  FOLLOW
}

model users {
  userId           String          @id @default(uuid())
  name             String
  email            String          @unique
  password         String
  isAdmin          Boolean         @default(false)
  phone            String?         @unique @default("")
  phoneCode        String?         @default("")
  city             String?         @default("")
  purpose          PURPOSE         @default(STUDENT)
  githubURL        String?         @default("")
  linkedInURL      String?         @default("")
  aboutYou         String?         @default("")
  bio              String?         @default("")
  aspirations      String?         @default("")
  profilePic       String?
  aboutJobTitle    String?         @default("")
  jobTitle         String?
  companyId        String?
  experience       String?
  tags             String[]        @default([])
  followers        follow[]        @relation("UserFollowers")
  following        follow[]        @relation("UserFollowing")
  timelineOfEvents timeline[]      @relation("Timeline")
  post             post[]
  likePost         like[]
  commentPost      comment[]
  history          history[]
  activity         activity[]
  profileViewed    profileViewed[]
  redirect         notification[]  @relation("Redirect")
  mainUser         notification[]  @relation("Main User")
  messagesFrom     message[]       @relation("fromUser")
  messagesTo       message[]       @relation("toUser")
  chatRooms        chatRoom[]      @relation("ChatRoomParticipants")
}

model follow {
  id             String   @id @default(uuid())
  followeeUserId String
  followee       users    @relation(fields: [followeeUserId], references: [userId], name: "UserFollowing")
  followerUserId String
  follower       users    @relation(fields: [followerUserId], references: [userId], name: "UserFollowers")
  status         Boolean
  timeStamp      DateTime @default(now())

  @@unique([followeeUserId, followerUserId], name: "followIdentifier")
}

model timeline {
  id          String    @id @default(uuid())
  userRefId   String
  userRef     users     @relation(fields: [userRefId], references: [userId], name: "Timeline")
  startDate   DateTime  @db.Date
  endDate     DateTime? @db.Date
  description String
  title       String
}

model post {
  id          String    @id @default(uuid())
  date        DateTime  @default(now())
  mediaLink   String[]
  caption     String
  description String
  tags        String[]
  landmark    String
  user        users     @relation(fields: [userId], references: [userId])
  userId      String
  like        like[]
  comment     comment[]
}

model comment {
  id              String       @id @default(uuid())
  user            users        @relation(fields: [userId], references: [userId])
  userId          String
  date            DateTime     @default(now())
  text            String
  media           String[]
  post            post?        @relation(fields: [postId], references: [id])
  postId          String?
  parentCommentId String?
  commentId       comment?     @relation("CommentAndReply", fields: [parentCommentId], references: [id])
  comment         comment[]    @relation("CommentAndReply")
  like            like[]
  mentionMail     String?
  commentType     COMMENTTYPES
}

model like {
  id        String    @id @default(uuid())
  post      post?     @relation(fields: [postId], references: [id])
  user      users     @relation(fields: [userId], references: [userId])
  userId    String
  postId    String?
  comment   comment?  @relation(fields: [commentId], references: [id])
  commentId String?
  likeType  LIKETYPES
}

model history {
  id          String    @id @default(uuid())
  startDate   DateTime
  endDate     DateTime?
  title       String
  description String
  users       users     @relation(fields: [userId], references: [userId])
  userId      String
  tags        String[]
  purpose     PURPOSE
}

model notification {
  id               String           @id @default(uuid())
  title            String           @default("You got a new notification.")
  notificationType NOTIFICATIONTYPE
  read             Boolean
  name             String
  picture          String
  time             DateTime         @default(now())

  redirect   users  @relation(fields: [redirectId], references: [userId], name: "Redirect")
  user       users  @relation(fields: [userId], references: [userId], name: "Main User")
  userId     String
  redirectId String
}

model activity {
  id       String    @id @default(uuid())
  user     users     @relation(fields: [userId], references: [userId])
  userId   String    @unique
  sectors  PURPOSE[]
  location String[]
  tags     String[]
}

model profileViewed {
  id        String   @id @default(uuid())
  user      users    @relation(fields: [userId], references: [userId])
  userId    String
  date      DateTime
  viewEmail String
}

model message {
  id         BigInt    @id @default(autoincrement())
  content    String
  fromId     String
  from       users     @relation(fields: [fromId], references: [userId], name: "fromUser")
  toId       String
  to         users     @relation(fields: [toId], references: [userId], name: "toUser")
  chatRoomId String?
  chatRoom   chatRoom? @relation(fields: [chatRoomId], references: [id], name: "ChatRoomMessages")
  timeStamp  DateTime  @default(now())
}

model chatRoom {
  id           String    @id @default(uuid())
  participants users[]   @relation("ChatRoomParticipants")
  messages     message[] @relation("ChatRoomMessages")
}
