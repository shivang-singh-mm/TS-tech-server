generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PURPOSE {
  NETWORK
  GETHIRED
  TOHIRE
}

enum COMMENTSTYPES {
  POST
  COMMENT
}

enum LIKEDTYPES {
  POST
  COMMENT
}

model users {
  userId           String        @id @default(uuid())
  name             String
  email            String        @unique
  password         String
  isAdmin          Boolean       @default(false)
  phone            String?       @unique @default("")
  phoneCode        String?       @default("")
  city             String?       @default("")
  purpose          PURPOSE       @default(NETWORK)
  githubURL        String?       @default("")
  linkedInURL      String?       @default("")
  aboutYou         String?       @default("")
  aboutJobTitle    String?       @default("")
  bio              String?       @default("")
  aspirations      String?       @default("")
  profilePic       String?
  followers        follow[]      @relation("UserFollowers")
  following        follow[]      @relation("UserFollowing")
  timelineOfEvents timeline[]    @relation("Timeline")
  post             post[]
  likePost         likePost[]
  commentPost      commentPost[]
}

model follow {
  id             String   @id @default(uuid())
  followeeUserId String
  followee       users    @relation(fields: [followeeUserId], references: [userId], name: "UserFollowing")
  followerUserId String
  follower       users    @relation(fields: [followerUserId], references: [userId], name: "UserFollowers")
  status         Boolean
  timeStamp      DateTime @default(now())

  @@unique([followeeUserId, followerUserId], name: "followIdentifier")
}

model timeline {
  id          String    @id @default(uuid())
  userRefId   String
  userRef     users     @relation(fields: [userRefId], references: [userId], name: "Timeline")
  startDate   DateTime  @db.Date
  endDate     DateTime? @db.Date
  description String
}

model post {
  id          String        @id @default(uuid())
  date        DateTime      @default(now())
  mediaLink   String[]
  caption     String
  description String
  tags        String[]
  landmark    String
  user        users         @relation(fields: [postedBy], references: [userId])
  postedBy    String
  likePost    likePost[]
  commentPost commentPost[]
}

model commentPost {
  id          String        @id @default(uuid())
  user        users         @relation(fields: [commentedBy], references: [userId])
  commentedBy String
  text        String
  media       String[]
  commentedOn COMMENTSTYPES
  post        post          @relation(fields: [postId], references: [id])
  postId      String
}

model likePost {
  id     String @id @default(uuid())
  post   post   @relation(fields: [postId], references: [id])
  user   users  @relation(fields: [userId], references: [userId])
  userId String
  postId String
}
